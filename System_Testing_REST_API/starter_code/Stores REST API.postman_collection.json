{
	"info": {
		"_postman_id": "53951d69-582f-453e-a8ec-dd00d211e27a",
		"name": "Stores REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41553062",
		"_collection_link": "https://simple-grocery-store-api-7821.postman.co/workspace/c6cd9e02-0754-4ebd-85cd-57b0ddf8aa2a/collection/41553062-53951d69-582f-453e-a8ec-dd00d211e27a?action=share&source=collection_link&creator=41553062"
	},
	"item": [
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.unset(\"access_token\")\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\",function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"User created successfully\", function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"User created successfully\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present in response\", function(){\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is 'application/json'\", function(){\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\") === 'application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"user20\",\r\n    \"password\":\"abcxyz\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"pm.environment.set(\"access_token\", jsonData.access_token);\r",
							"\r",
							"pm.test(\"Status code is 300\", function(){\r",
							"    pm.expect(pm.response.code).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Body contais access_token\",function(){\r",
							"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
							"});\r",
							"\r",
							"pm.test(\"access_token is a non-empty string\", function () {\r",
							"    pm.expect(jsonData.access_token).to.be.a('string').and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 150ms\"), function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"user20\",\r\n    \"password\":\"abcxyz\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 150ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"});\r",
							"\r",
							"pm.test(\"Store creation successful\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"test_store\");\r",
							"    pm.environment.set(\"store_name\", jsonData.name);\r",
							"    pm.environment.set(\"store_items\", jsonData.items);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is 'application/json'\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.environment.set(\"store_id\", jsonData.id); // Store the store ID in the environment variable for future use.\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"test_store\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/store/test_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"test_store"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 150ms\"), function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"}\r",
							"\r",
							"pm.test(\"Item created\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"test_item\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check if the response contains the correct property\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"price\");\r",
							"    pm.expect(jsonData).to.have.property(\"store_id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is 'application/json'\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"test_item\",\r\n    \"price\":17.99,\r\n    \"store_id\":{{store_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/item/test_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"test_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/stores",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"pm.test(\"Store 'test_store' is returned\", function(){\r",
							"    pm.expect(jsonData.stores[0].name).to.eql(\"test_store\")\r",
							"});\r",
							"\r",
							"pm.test(\"ID of store 'test_store' is returned\",function(){\r",
							"    pm.expect(jsonData.stores[0].items[0].store_id).to.eql(parseInt(pm.environment.get(\"store_id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Item 'test_item' is returned inside 'test_store'\", function () {\r",
							"    pm.expect(jsonData.stores[0].items[0].name).to.eql(\"test_item\");\r",
							"});\r",
							"\r",
							"pm.test(\"Item 'test_item' price is returned inside 'test_store'\", function () {\r",
							"    pm.expect(jsonData.stores[0].items[0].price).to.eql(17.99);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 150ms\"), function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"}\r",
							"\r",
							"pm.test(\"Content-Type is 'application/json'\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/stores",
					"host": [
						"{{url}}"
					],
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 150ms\"), function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
							"}\r",
							"\r",
							"pm.test(\"Response body contains correct property\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"items\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/store/test_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"test_store"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/my_item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains correct property\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"price\");\r",
							"    pm.expect(jsonData).to.have.property(\"store_id\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/item/test_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"test_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/items",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/items",
					"host": [
						"{{url}}"
					],
					"path": [
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/my_item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"pm.test(\"Message is returned\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Item deleted\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\"), function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"}\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/item/test_item",
					"host": [
						"{{url}}"
					],
					"path": [
						"item",
						"test_item"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData =  pm.response.json();\r",
							"\r",
							"pm.test(\"Message is returned\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Store deleted\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\"), function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"test_store\",\r\n    \"price\":19.99,\"store_id\":1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/store/test_store",
					"host": [
						"{{url}}"
					],
					"path": [
						"store",
						"test_store"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://127.0.0.1:5000",
			"type": "string"
		}
	]
}